# My Project Plan #
***Note:*** This document is written merely as an illustrative example, and does not provide
any working guide to an actual project.
### Proposal ###
---
I am planning to make a computer vision software that detects objects in images.  
In order to build it, I will use opencv, deep learning libraries, such as [TensorFlow](https://www.tensorflow.org/)
or [PyTorch](https://pytorch.org/), and other open source softwares.
![image](https://user-images.githubusercontent.com/12907710/137271636-56ba1cd2-b110-4812-8221-b4c120320aa9.png)
---
### Dependencies ###
- python
- opencv-python
- tensorflow
- openmmlab
- package manager

### Installation ###
In a bash terminal, run the following commands (*Do NOT actually run these commands in
your computer*):
```sh
$ sudo apt update
$ conda create -n cv_detection
$ conda activate cv_detection
$ python --version
$ python example.py
```

# What is Linux #
Open-source Unix-like operating system sandkernels,first released by LinusTorvalds in 1991. Popular distributions include Debian,Fedora,and Ubuntu,among many others. Leading OS on servers(over96.4%ofthetop1millionwebservers). Also runs one mbedded system sandmobile systems(Android). Most widely-used platform for open source software development. Secure and stable. Runs on CLI(CommandLineInterface),but many distributions support GUIs as well.
### Shell Command ###
---
•cd : changedirectory 
•ls : listfilesanddirectories
•arguments: 
[directoryname]/root  .currentdirectory
..upper-leveldirectory
~homeofcurrentuser
/[directoryname]:absolutepath  
./[directoryname]:relativepath  
../[directoryname]:relativepath
•options:  
-l show detailed in formation(longformat)  
-lh same as above,but size in units
---
### Manipulation ###
- cp : copyfilesanddirectories
- mv : movefilesanddirectoriesorrenamethem
- rm : deletefilesanddirectoriespermantelyandirreversevely!!!
- mkdir : makeanewdirectory
---
### Wild Card ###
```sh
$ * : All filenames.
$ g* : All filenames begin with "g"
$ b*.txt : All filenames with "b", end with "txt"
$ Data??? : Any filename that begins with the character "Data" follewed by 3 more characters.
$ cp *.txt text_files : Copy all files in the current working directory with names ending with the characters".txt" to an existing directory named text_files.
$ mv dirl ../*.bak dir2 : Move the subdirectory dir1 and all the files ending with ".bak" in the current working directory's parent directory to an existing directory named dir2.
$ rm *~ : Delete all files in the current working directory that end with the character"~". Some application create backup files using the naming scheme. Using this command will clean them out of a directory.
```

## I/O Redirection : Standard Output ##
- By default, standard output is screen.
- You can redirect output using “>” after a command(e.g.,ls) to create and save the output in a file.  
- Command “cat” displays the content of a textfile.
- Using “>>” appends output to an extising file(if it already exists), or create and write to a new file if it doesn’t exist.
---
## I/O Redirection : Standard Input ##
- By default, standard input is from keyboard.  
- You can redirect input from a file using “<”.  
- You can mix “<“and“>” together in a single line.

---
## Wild Card ##
```sh
• Pipelines < | > : Pipeline feeds output of previous command to input of next command.
• Expansion : Special characters expand its meaning when given to shell commands.
• Backslash : Backslah can be used to ignore line change in command(“enter”),  to enter a long command in multiplelines.
```
## Permissions ##
- Linux is a multi-user system. 
- Files and directories have a permission assigned differently to owner/group/others.
```sh
• 777(rwxrwxrwx) : No restrictions on permissions. Anybody may do anything. Generally not a desirable setting.
• 755(rwxr-xr-x) : The file`s owner may read, write, and execute the file. All others may read and execute the file. This setting is common for programs that are used by all users.
• 700(rwx------) : The file`s owner may read, write, and execute the file. Nobody else has any rights. This setting is useful for programs that only the owner may use and must be kept private from others.
• 666(rw-rw-rw-) : All users may read and write the file.
• 644(rw-r--r--) : The owner may read and write a file, while all others may only read the file. A common setting for data files that everybody may read, but only owner may change.
• 600(rw-------) : The owner may read and write a file. All others have no rights. A common setting for data files that the owner wants to keep private.
```
- Change the permission of a file “word.txt” that only the owner(you) can read and write,  but all the others(including others in the group) can only read it. No execution is needed for all users.
---
## Superuser ##
- A superuser has all system administation authority.
- Some commands need superuser’sprivilleges.
- Put “sudo” before the command if you are a superuser.
- Type “exit” to get out of a superuser session.
---
## Text editors ##
- In Linux, you can choose CLI-based or GUI-based text editors.
```sh
• vi, vim : The granddaddy of Unix text editors, [vi], is infamous for its obtuse user interface. On the bright side, [vi], is powerful, lightweight, and fast. Learning [vi] is a Unix rite of passage, since it is universally available on Unix-like systems. On most Linux distributions, and enhanced version of [vi] called [vim] is provied in place of [vi]. [vim] is a remarkable editor and well worth taking the time to learn it.
• Emacs : The true giant in the world of text is Emacs originally written by "Richard Stallman". Emac contains(or can be made to contain) every feature ever conceived of for a text editor. It should be noted that [vi] and Emacs fans fight bitter religious wars over which is better.
• nano : [nano] is a free clone of the text editor supplied with the [pine] email program. [nano] is very easy to use but is very short on features compared to [vim] and [Emacs]. [nano] is recommended for first-time users who need a command line editor.
• gedit : [gedit] is the editor supplied with the GNOME desktop environment. gedit is easy to use and contains enough features to be a good beginners-level editor.
• kwrite : [kwrite] is the "advanced editor" supplied with KDE. It has syntax highlighting, a helpful feature for programmers and script wirters.
```


## Git config : First-time setup ##
- (1) System level : --system option. Affects all uses and repositories on the system(administrative)
file: /etc/gitconfig  
- (2) Global(user)level : -- global option. Affects all repositories of acurrent user  
file: ~/.config/git/config
- (3) Local level : -- local option. Specific to the current repository
file: .git/gitconfig  
*Each level overrides values in the previous level : system -> global -> loca
---

```sh
Initializing a Repository in an Existing Directory = $git init
Checking Repository Status = $git status
Adding a new file to be staged (tracked) = $git add[file_name]
Adding all files to be staged (tracked) = $git add.
Unstaging a file = $git rm–cached[file_name]
Ignoring a file = .gitignore file
Commit = $git commit-m “commit message” 
```


